/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { State } from "./State";
import { StateCountArgs } from "./StateCountArgs";
import { StateFindManyArgs } from "./StateFindManyArgs";
import { StateFindUniqueArgs } from "./StateFindUniqueArgs";
import { CreateStateArgs } from "./CreateStateArgs";
import { UpdateStateArgs } from "./UpdateStateArgs";
import { DeleteStateArgs } from "./DeleteStateArgs";
import { Country } from "../../country/base/Country";
import { StateService } from "../state.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => State)
export class StateResolverBase {
  constructor(
    protected readonly service: StateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "any",
  })
  async _statesMeta(
    @graphql.Args() args: StateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [State])
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "any",
  })
  async states(@graphql.Args() args: StateFindManyArgs): Promise<State[]> {
    return this.service.states(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => State, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "own",
  })
  async state(
    @graphql.Args() args: StateFindUniqueArgs
  ): Promise<State | null> {
    const result = await this.service.state(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => State)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "create",
    possession: "any",
  })
  async createState(@graphql.Args() args: CreateStateArgs): Promise<State> {
    return await this.service.createState({
      ...args,
      data: {
        ...args.data,

        country: args.data.country
          ? {
              connect: args.data.country,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => State)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async updateState(
    @graphql.Args() args: UpdateStateArgs
  ): Promise<State | null> {
    try {
      return await this.service.updateState({
        ...args,
        data: {
          ...args.data,

          country: args.data.country
            ? {
                connect: args.data.country,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => State)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "delete",
    possession: "any",
  })
  async deleteState(
    @graphql.Args() args: DeleteStateArgs
  ): Promise<State | null> {
    try {
      return await this.service.deleteState(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Country, {
    nullable: true,
    name: "country",
  })
  @nestAccessControl.UseRoles({
    resource: "Country",
    action: "read",
    possession: "any",
  })
  async getCountry(@graphql.Parent() parent: State): Promise<Country | null> {
    const result = await this.service.getCountry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
