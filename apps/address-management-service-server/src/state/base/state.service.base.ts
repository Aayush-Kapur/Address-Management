/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  State as PrismaState,
  Country as PrismaCountry,
} from "@prisma/client";

export class StateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StateCountArgs, "select">): Promise<number> {
    return this.prisma.state.count(args);
  }

  async states<T extends Prisma.StateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StateFindManyArgs>
  ): Promise<PrismaState[]> {
    return this.prisma.state.findMany<Prisma.StateFindManyArgs>(args);
  }
  async state<T extends Prisma.StateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StateFindUniqueArgs>
  ): Promise<PrismaState | null> {
    return this.prisma.state.findUnique(args);
  }
  async createState<T extends Prisma.StateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StateCreateArgs>
  ): Promise<PrismaState> {
    return this.prisma.state.create<T>(args);
  }
  async updateState<T extends Prisma.StateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StateUpdateArgs>
  ): Promise<PrismaState> {
    return this.prisma.state.update<T>(args);
  }
  async deleteState<T extends Prisma.StateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StateDeleteArgs>
  ): Promise<PrismaState> {
    return this.prisma.state.delete(args);
  }

  async getCountry(parentId: string): Promise<PrismaCountry | null> {
    return this.prisma.state
      .findUnique({
        where: { id: parentId },
      })
      .country();
  }
}
