/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AddressBook } from "./AddressBook";
import { AddressBookCountArgs } from "./AddressBookCountArgs";
import { AddressBookFindManyArgs } from "./AddressBookFindManyArgs";
import { AddressBookFindUniqueArgs } from "./AddressBookFindUniqueArgs";
import { CreateAddressBookArgs } from "./CreateAddressBookArgs";
import { UpdateAddressBookArgs } from "./UpdateAddressBookArgs";
import { DeleteAddressBookArgs } from "./DeleteAddressBookArgs";
import { Address } from "../../address/base/Address";
import { User } from "../../user/base/User";
import { AddressBookService } from "../addressBook.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AddressBook)
export class AddressBookResolverBase {
  constructor(
    protected readonly service: AddressBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AddressBook",
    action: "read",
    possession: "any",
  })
  async _addressBooksMeta(
    @graphql.Args() args: AddressBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AddressBook])
  @nestAccessControl.UseRoles({
    resource: "AddressBook",
    action: "read",
    possession: "any",
  })
  async addressBooks(
    @graphql.Args() args: AddressBookFindManyArgs
  ): Promise<AddressBook[]> {
    return this.service.addressBooks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AddressBook, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AddressBook",
    action: "read",
    possession: "own",
  })
  async addressBook(
    @graphql.Args() args: AddressBookFindUniqueArgs
  ): Promise<AddressBook | null> {
    const result = await this.service.addressBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AddressBook)
  @nestAccessControl.UseRoles({
    resource: "AddressBook",
    action: "create",
    possession: "any",
  })
  async createAddressBook(
    @graphql.Args() args: CreateAddressBookArgs
  ): Promise<AddressBook> {
    return await this.service.createAddressBook({
      ...args,
      data: {
        ...args.data,

        address: args.data.address
          ? {
              connect: args.data.address,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AddressBook)
  @nestAccessControl.UseRoles({
    resource: "AddressBook",
    action: "update",
    possession: "any",
  })
  async updateAddressBook(
    @graphql.Args() args: UpdateAddressBookArgs
  ): Promise<AddressBook | null> {
    try {
      return await this.service.updateAddressBook({
        ...args,
        data: {
          ...args.data,

          address: args.data.address
            ? {
                connect: args.data.address,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AddressBook)
  @nestAccessControl.UseRoles({
    resource: "AddressBook",
    action: "delete",
    possession: "any",
  })
  async deleteAddressBook(
    @graphql.Args() args: DeleteAddressBookArgs
  ): Promise<AddressBook | null> {
    try {
      return await this.service.deleteAddressBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Address, {
    nullable: true,
    name: "address",
  })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async getAddress(
    @graphql.Parent() parent: AddressBook
  ): Promise<Address | null> {
    const result = await this.service.getAddress(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: AddressBook): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
