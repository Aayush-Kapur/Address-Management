/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AddressBook as PrismaAddressBook,
  Address as PrismaAddress,
  User as PrismaUser,
} from "@prisma/client";

export class AddressBookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AddressBookCountArgs, "select">
  ): Promise<number> {
    return this.prisma.addressBook.count(args);
  }

  async addressBooks<T extends Prisma.AddressBookFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressBookFindManyArgs>
  ): Promise<PrismaAddressBook[]> {
    return this.prisma.addressBook.findMany<Prisma.AddressBookFindManyArgs>(
      args
    );
  }
  async addressBook<T extends Prisma.AddressBookFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressBookFindUniqueArgs>
  ): Promise<PrismaAddressBook | null> {
    return this.prisma.addressBook.findUnique(args);
  }
  async createAddressBook<T extends Prisma.AddressBookCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressBookCreateArgs>
  ): Promise<PrismaAddressBook> {
    return this.prisma.addressBook.create<T>(args);
  }
  async updateAddressBook<T extends Prisma.AddressBookUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressBookUpdateArgs>
  ): Promise<PrismaAddressBook> {
    return this.prisma.addressBook.update<T>(args);
  }
  async deleteAddressBook<T extends Prisma.AddressBookDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressBookDeleteArgs>
  ): Promise<PrismaAddressBook> {
    return this.prisma.addressBook.delete(args);
  }

  async getAddress(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.addressBook
      .findUnique({
        where: { id: parentId },
      })
      .address();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.addressBook
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
