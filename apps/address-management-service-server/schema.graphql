# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  addressBooks(orderBy: [AddressBookOrderByInput!], skip: Float, take: Float, where: AddressBookWhereInput): [AddressBook!]!
  city: String
  country: String
  createdAt: DateTime!
  googleMapsLink: String
  id: String!
  label: String
  postalCode: String
  state: String
  street: String
  updatedAt: DateTime!
  user: User
}

type AddressBook {
  address: Address
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User
}

input AddressBookCreateInput {
  address: AddressWhereUniqueInput
  user: UserWhereUniqueInput
}

input AddressBookCreateNestedManyWithoutAddressesInput {
  connect: [AddressBookWhereUniqueInput!]
}

input AddressBookCreateNestedManyWithoutUsersInput {
  connect: [AddressBookWhereUniqueInput!]
}

input AddressBookListRelationFilter {
  every: AddressBookWhereInput
  none: AddressBookWhereInput
  some: AddressBookWhereInput
}

input AddressBookOrderByInput {
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AddressBookUpdateInput {
  address: AddressWhereUniqueInput
  user: UserWhereUniqueInput
}

input AddressBookUpdateManyWithoutAddressesInput {
  connect: [AddressBookWhereUniqueInput!]
  disconnect: [AddressBookWhereUniqueInput!]
  set: [AddressBookWhereUniqueInput!]
}

input AddressBookUpdateManyWithoutUsersInput {
  connect: [AddressBookWhereUniqueInput!]
  disconnect: [AddressBookWhereUniqueInput!]
  set: [AddressBookWhereUniqueInput!]
}

input AddressBookWhereInput {
  address: AddressWhereUniqueInput
  id: StringFilter
  user: UserWhereUniqueInput
}

input AddressBookWhereUniqueInput {
  id: String!
}

input AddressCreateInput {
  addressBooks: AddressBookCreateNestedManyWithoutAddressesInput
  city: String
  country: String
  googleMapsLink: String
  label: String
  postalCode: String
  state: String
  street: String
  user: UserWhereUniqueInput
}

input AddressCreateNestedManyWithoutUsersInput {
  connect: [AddressWhereUniqueInput!]
}

input AddressListRelationFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressOrderByInput {
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  googleMapsLink: SortOrder
  id: SortOrder
  label: SortOrder
  postalCode: SortOrder
  state: SortOrder
  street: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AddressUpdateInput {
  addressBooks: AddressBookUpdateManyWithoutAddressesInput
  city: String
  country: String
  googleMapsLink: String
  label: String
  postalCode: String
  state: String
  street: String
  user: UserWhereUniqueInput
}

input AddressUpdateManyWithoutUsersInput {
  connect: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
}

input AddressWhereInput {
  addressBooks: AddressBookListRelationFilter
  city: StringNullableFilter
  country: StringNullableFilter
  googleMapsLink: StringNullableFilter
  id: StringFilter
  label: StringNullableFilter
  postalCode: StringNullableFilter
  state: StringNullableFilter
  street: StringNullableFilter
  user: UserWhereUniqueInput
}

input AddressWhereUniqueInput {
  id: String!
}

type Country {
  countryCode: String
  countryName: String
  createdAt: DateTime!
  id: String!
  states(orderBy: [StateOrderByInput!], skip: Float, take: Float, where: StateWhereInput): [State!]!
  updatedAt: DateTime!
}

input CountryCreateInput {
  countryCode: String
  countryName: String
  states: StateCreateNestedManyWithoutCountriesInput
}

input CountryOrderByInput {
  countryCode: SortOrder
  countryName: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CountryUpdateInput {
  countryCode: String
  countryName: String
  states: StateUpdateManyWithoutCountriesInput
}

input CountryWhereInput {
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  id: StringFilter
  states: StateListRelationFilter
}

input CountryWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createAddressBook(data: AddressBookCreateInput!): AddressBook!
  createCountry(data: CountryCreateInput!): Country!
  createState(data: StateCreateInput!): State!
  createUser(data: UserCreateInput!): User!
  deleteAddress(where: AddressWhereUniqueInput!): Address!
  deleteAddressBook(where: AddressBookWhereUniqueInput!): AddressBook!
  deleteCountry(where: CountryWhereUniqueInput!): Country!
  deleteState(where: StateWhereUniqueInput!): State!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updateAddressBook(data: AddressBookUpdateInput!, where: AddressBookWhereUniqueInput!): AddressBook!
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country!
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _addressBooksMeta(where: AddressBookWhereInput): MetaQueryPayload!
  _addressesMeta(where: AddressWhereInput): MetaQueryPayload!
  _countriesMeta(where: CountryWhereInput): MetaQueryPayload!
  _statesMeta(where: StateWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  address(where: AddressWhereUniqueInput!): Address
  addressBook(where: AddressBookWhereUniqueInput!): AddressBook
  addressBooks(orderBy: [AddressBookOrderByInput!], skip: Float, take: Float, where: AddressBookWhereInput): [AddressBook!]!
  addresses(orderBy: [AddressOrderByInput!], skip: Float, take: Float, where: AddressWhereInput): [Address!]!
  countries(orderBy: [CountryOrderByInput!], skip: Float, take: Float, where: CountryWhereInput): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  state(where: StateWhereUniqueInput!): State
  states(orderBy: [StateOrderByInput!], skip: Float, take: Float, where: StateWhereInput): [State!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

type State {
  country: Country
  createdAt: DateTime!
  id: String!
  stateName: String
  updatedAt: DateTime!
}

input StateCreateInput {
  country: CountryWhereUniqueInput
  stateName: String
}

input StateCreateNestedManyWithoutCountriesInput {
  connect: [StateWhereUniqueInput!]
}

input StateListRelationFilter {
  every: StateWhereInput
  none: StateWhereInput
  some: StateWhereInput
}

input StateOrderByInput {
  countryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  stateName: SortOrder
  updatedAt: SortOrder
}

input StateUpdateInput {
  country: CountryWhereUniqueInput
  stateName: String
}

input StateUpdateManyWithoutCountriesInput {
  connect: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
}

input StateWhereInput {
  country: CountryWhereUniqueInput
  id: StringFilter
  stateName: StringNullableFilter
}

input StateWhereUniqueInput {
  id: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  addressBooks(orderBy: [AddressBookOrderByInput!], skip: Float, take: Float, where: AddressBookWhereInput): [AddressBook!]!
  addresses(orderBy: [AddressOrderByInput!], skip: Float, take: Float, where: AddressWhereInput): [Address!]!
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  temporaryField: String
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  addressBooks: AddressBookCreateNestedManyWithoutUsersInput
  addresses: AddressCreateNestedManyWithoutUsersInput
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  temporaryField: String
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  temporaryField: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  addressBooks: AddressBookUpdateManyWithoutUsersInput
  addresses: AddressUpdateManyWithoutUsersInput
  email: String
  firstName: String
  lastName: String
  password: String
  roles: JSON
  temporaryField: String
  username: String
}

input UserWhereInput {
  addressBooks: AddressBookListRelationFilter
  addresses: AddressListRelationFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  temporaryField: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}